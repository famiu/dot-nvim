vim.cmd.highlight('clear')

local colors = {
    DarkCyan = '#007373',
    DarkGray1 = '#07080d',
    DarkGray2 = '#14161b',
    DarkGray3 = '#2c2e33',
    DarkGray4 = '#4f5258',
    DarkGreen = '#005523',
    DarkRed = '#590008',
    DarkYellow = '#6b5300',
    LightBlue = '#a6dbff',
    LightCyan = '#8cf8f7',
    LightGray1 = '#eef1f8',
    LightGray2 = '#e0e2ea',
    LightGray3 = '#c4c6cd',
    LightGray4 = '#9b9ea4',
    LightGreen = '#b3f6c0',
    LightMint = '#c8dacd',
    LightRed = '#ffc0b9',
    LightRose = '#e6cdd3',
    LightYellow = '#fce094',
}

local hls = {
    -- Normal
    Normal = { fg = colors.LightGray2, bg = colors.DarkGray2 },

    -- UI
    Added = { fg = colors.LightGreen },
    Changed = { fg = colors.LightCyan },
    ColorColumn = { bg = colors.DarkGray4 },
    Conceal = { fg = colors.DarkGray4 },
    CurSearch = { fg = colors.DarkGray1, bg = colors.LightYellow },
    Cursor = { bg = colors.Black, fg = colors.White },
    CursorColumn = { bg = colors.DarkGray3 },
    CursorIM = { link = 'Cursor' },
    CursorLine = { bg = colors.DarkGray3 },
    CursorLineFold = { link = 'FoldColumn' },
    CursorLineNr = { bold = true },
    CursorLineSign = { link = 'SignColumn' },
    DiffAdd = { fg = colors.LightGray1, bg = colors.DarkGreen },
    DiffChange = { fg = colors.LightGray1, bg = colors.DarkGray4 },
    DiffDelete = { fg = colors.LightRed, bold = true },
    DiffText = { fg = colors.LightGray1, bg = colors.DarkCyan },
    Directory = { fg = colors.LightCyan },
    EndOfBuffer = { link = 'NonText' },
    ErrorMsg = { fg = colors.LightRed },
    FloatBorder = { link = 'NormalFloat' },
    FloatFooter = { link = 'FloatTitle' },
    FloatShadow = { bg = colors.DarkGray4, blend = 80 },
    FloatShadowThrough = { bg = colors.DarkGray4, blend = 100 },
    FloatTitle = { link = 'Title' },
    FoldColumn = { link = 'SignColumn' },
    Folded = { fg = colors.LightGray4, bg = colors.DarkGray3 },
    IncSearch = { link = 'CurSearch' },
    LineNr = { fg = colors.DarkGray4 },
    LineNrAbove = { link = 'LineNr' },
    LineNrBelow = { link = 'LineNr' },
    MatchParen = { bg = colors.DarkGray4, bold = true },
    ModeMsg = { fg = colors.LightGreen },
    MoreMsg = { fg = colors.LightCyan },
    MsgArea = { link = 'NONE' },
    MsgSeparator = { link = 'StatusLine' },
    NonText = { fg = colors.DarkGray4 },
    NormalFloat = { bg = colors.DarkGray1 },
    NormalNC = { link = 'NONE' },
    Pmenu = { bg = colors.DarkGray3 },
    PmenuExtra = { link = 'Pmenu' },
    PmenuExtraSel = { link = 'PmenuSel' },
    PmenuKind = { link = 'Pmenu' },
    PmenuKindSel = { link = 'PmenuSel' },
    PmenuMatch = { link = 'Pmenu' },
    PmenuMatchSel = { link = 'PmenuSel' },
    PmenuSbar = { link = 'Pmenu' },
    PmenuSel = { fg = colors.DarkGray3, bg = colors.LightGray2 },
    PmenuThumb = { bg = colors.DarkGray4 },
    Question = { fg = colors.LightCyan },
    QuickFixLine = { fg = colors.LightCyan },
    RedrawDebugClear = { bg = colors.DarkYellow },
    RedrawDebugComposed = { bg = colors.DarkGreen },
    RedrawDebugNormal = { reverse = true },
    RedrawDebugRecompose = { bg = colors.DarkRed },
    Removed = { fg = colors.LightRed },
    Search = { fg = colors.LightGray1, bg = colors.DarkYellow },
    SignColumn = { fg = colors.DarkGray4 },
    SpecialKey = { fg = colors.DarkGray4 },
    SpellBad = { sp = colors.LightRed, undercurl = true },
    SpellCap = { sp = colors.LightYellow, undercurl = true },
    SpellLocal = { sp = colors.LightGreen, undercurl = true },
    SpellRare = { sp = colors.LightCyan, undercurl = true },
    StatusLine = { fg = colors.DarkGray3, bg = colors.LightGray3 },
    StatusLineNC = { fg = colors.LightGray3, bg = colors.DarkGray3 },
    StatusLineTerm = { link = 'StatusLine' },
    StatusLineTermNC = { link = 'StatusLineNC' },
    Substitute = { link = 'Search' },
    TabLine = { link = 'StatusLineNC' },
    TabLineFill = { link = 'TabLine' },
    TabLineSel = { bold = true },
    TermCursor = { reverse = true },
    TermCursorNC = { link = 'NONE' },
    Title = { fg = colors.LightGray2, bold = true },
    Underlined = { underline = true },
    VertSplit = { link = 'WinSeparator' },
    Visual = { bg = colors.DarkGray4 },
    VisualNOS = { link = 'Visual' },
    WarningMsg = { fg = colors.LightYellow },
    Whitespace = { link = 'NonText' },
    WildMenu = { link = 'PmenuSel' },
    WinBar = { fg = colors.LightGray4, bg = colors.DarkGray1, bold = true },
    WinBarNC = { fg = colors.LightGray4, bg = colors.DarkGray1 },
    WinSeparator = { link = 'Normal' },
    lCursor = { bg = colors.Black, fg = colors.White },

    -- Syntax
    Constant = { fg = colors.LightMint },
    Operator = { fg = colors.LightGray2 },
    PreProc = { fg = colors.LightGray2 },
    Type = { fg = colors.LightYellow },
    Delimiter = { fg = colors.LightGray2 },
    Comment = { fg = colors.LightGray4 },
    String = { fg = colors.LightGreen },
    Identifier = { fg = colors.LightRose },
    Function = { fg = colors.LightBlue },
    Keyword = { fg = colors.LightRed },
    Statement = { fg = colors.LightGray2, bold = true },
    Special = { fg = colors.LightCyan },
    Error = { fg = colors.LightGray1, bg = colors.DarkRed },
    Todo = { fg = colors.LightGray2, bold = true },
    Character = { link = 'Constant' },
    Number = { link = 'Constant' },
    Boolean = { link = 'Constant' },
    Float = { link = 'Number' },
    Conditional = { link = 'Statement' },
    Repeat = { link = 'Statement' },
    Label = { link = 'Statement' },
    Exception = { link = 'Statement' },
    Include = { link = 'PreProc' },
    Define = { link = 'PreProc' },
    Macro = { link = 'PreProc' },
    PreCondit = { link = 'PreProc' },
    StorageClass = { link = 'Type' },
    Structure = { link = 'Type' },
    Typedef = { link = 'Type' },
    Tag = { link = 'Special' },
    SpecialChar = { link = 'Special' },
    SpecialComment = { link = 'Special' },
    Debug = { link = 'Special' },
    Ignore = { link = 'Normal' },

    -- Diagnostic
    DiagnosticError = { fg = colors.LightRed },
    DiagnosticWarn = { fg = colors.LightYellow },
    DiagnosticInfo = { fg = colors.LightCyan },
    DiagnosticHint = { fg = colors.LightBlue },
    DiagnosticOk = { fg = colors.LightGreen },
    DiagnosticUnderlineError = { sp = colors.LightRed, underline = true },
    DiagnosticUnderlineWarn = { sp = colors.LightYellow, underline = true },
    DiagnosticUnderlineInfo = { sp = colors.LightCyan, underline = true },
    DiagnosticUnderlineHint = { sp = colors.LightBlue, underline = true },
    DiagnosticUnderlineOk = { sp = colors.LightGreen, underline = true },
    DiagnosticDeprecated = { sp = colors.LightRed, strikethrough = true },

    -- Built-in LSP
    LspCodeLens = { link = 'NonText' },
    LspCodeLensSeparator = { link = 'LspCodeLens' },
    LspInlayHint = { link = 'NonText' },
    LspReferenceRead = { link = 'LspReferenceText' },
    LspReferenceText = { link = 'Visual' },
    LspReferenceWrite = { link = 'LspReferenceText' },
    LspSignatureActiveParameter = { link = 'Visual' },
    SnippetTabstop = { link = 'Visual' },

    -- Diagnostic
    DiagnosticFloatingError = { link = 'DiagnosticError' },
    DiagnosticFloatingWarn = { link = 'DiagnosticWarn' },
    DiagnosticFloatingInfo = { link = 'DiagnosticInfo' },
    DiagnosticFloatingHint = { link = 'DiagnosticHint' },
    DiagnosticFloatingOk = { link = 'DiagnosticOk' },
    DiagnosticVirtualTextError = { link = 'DiagnosticError' },
    DiagnosticVirtualTextWarn = { link = 'DiagnosticWarn' },
    DiagnosticVirtualTextInfo = { link = 'DiagnosticInfo' },
    DiagnosticVirtualTextHint = { link = 'DiagnosticHint' },
    DiagnosticVirtualTextOk = { link = 'DiagnosticOk' },
    DiagnosticSignError = { link = 'DiagnosticError' },
    DiagnosticSignWarn = { link = 'DiagnosticWarn' },
    DiagnosticSignInfo = { link = 'DiagnosticInfo' },
    DiagnosticSignHint = { link = 'DiagnosticHint' },
    DiagnosticSignOk = { link = 'DiagnosticOk' },
    DiagnosticUnnecessary = { link = 'Comment' },

    -- Treesitter standard groups
    ['@variable'] = { fg = colors.LightGray2 },
    ['@variable.builtin'] = { link = 'Special' },
    ['@variable.parameter.builtin'] = { link = 'Special' },
    ['@constant'] = { link = 'Constant' },
    ['@constant.builtin'] = { link = 'Special' },
    ['@module'] = { link = 'Structure' },
    ['@module.builtin'] = { link = 'Special' },
    ['@label'] = { link = 'Label' },
    ['@string'] = { link = 'String' },
    ['@string.regexp'] = { link = '@string.special' },
    ['@string.escape'] = { link = '@string.special' },
    ['@string.special'] = { link = 'SpecialChar' },
    ['@string.special.url'] = { link = 'Underlined' },
    ['@character'] = { link = 'Character' },
    ['@character.special'] = { link = 'SpecialChar' },
    ['@boolean'] = { link = 'Boolean' },
    ['@number'] = { link = 'Number' },
    ['@number.float'] = { link = 'Float' },
    ['@type'] = { link = 'Type' },
    ['@type.builtin'] = { link = 'Special' },
    ['@attribute'] = { link = 'Macro' },
    ['@attribute.builtin'] = { link = 'Special' },
    ['@property'] = { link = 'Identifier' },
    ['@function'] = { link = 'Function' },
    ['@function.builtin'] = { link = 'Special' },
    ['@constructor'] = { link = 'Special' },
    ['@operator'] = { link = 'Operator' },
    ['@keyword'] = { link = 'Keyword' },
    ['@punctuation'] = { link = 'Delimiter' },
    ['@punctuation.special'] = { link = 'Special' },
    ['@comment'] = { link = 'Comment' },
    ['@comment.error'] = { link = 'DiagnosticError' },
    ['@comment.warning'] = { link = 'DiagnosticWarn' },
    ['@comment.note'] = { link = 'DiagnosticInfo' },
    ['@comment.todo'] = { link = 'Todo' },

    ['@markup.strong'] = { bold = true },
    ['@markup.italic'] = { italic = true },
    ['@markup.strikethrough'] = { strikethrough = true },
    ['@markup.underline'] = { underline = true },

    ['@markup'] = { link = 'Special' },
    ['@markup.heading'] = { link = 'Title' },
    ['@markup.link'] = { link = 'Underlined' },

    ['@diff.plus'] = { link = 'Added' },
    ['@diff.minus'] = { link = 'Removed' },
    ['@diff.delta'] = { link = 'Changed' },

    ['@tag'] = { link = 'Tag' },
    ['@tag.builtin'] = { link = 'Special' },

    -- LSP semantic tokens
    ['@lsp.type.class'] = { link = '@type' },
    ['@lsp.type.comment'] = { link = '@comment' },
    ['@lsp.type.decorator'] = { link = '@attribute' },
    ['@lsp.type.enum'] = { link = '@type' },
    ['@lsp.type.enumMember'] = { link = '@constant' },
    ['@lsp.type.event'] = { link = '@type' },
    ['@lsp.type.function'] = { link = '@function' },
    ['@lsp.type.interface'] = { link = '@type' },
    ['@lsp.type.keyword'] = { link = '@keyword' },
    ['@lsp.type.macro'] = { link = '@constant.macro' },
    ['@lsp.type.method'] = { link = '@function.method' },
    ['@lsp.type.modifier'] = { link = '@type.qualifier' },
    ['@lsp.type.namespace'] = { link = '@module' },
    ['@lsp.type.number'] = { link = '@number' },
    ['@lsp.type.operator'] = { link = '@operator' },
    ['@lsp.type.parameter'] = { link = '@variable.parameter' },
    ['@lsp.type.property'] = { link = '@property' },
    ['@lsp.type.regexp'] = { link = '@string.regexp' },
    ['@lsp.type.string'] = { link = '@string' },
    ['@lsp.type.struct'] = { link = '@type' },
    ['@lsp.type.type'] = { link = '@type' },
    ['@lsp.type.typeParameter'] = { link = '@type.definition' },
    ['@lsp.type.variable'] = { link = '@variable' },

    ['@lsp.mod.deprecated'] = { link = 'DiagnosticDeprecated' },
}

local set_hl = vim.api.nvim_set_hl

for hl_name, hl_info in pairs(hls) do
    set_hl(0, hl_name, hl_info)
end

vim.g.colors_name = 'lullaby'
